{"ast":null,"code":"var _jsxFileName = \"/home/lennon/Documentos/Programa\\xE7\\xE3o/APP-RECEITAS/sd-07-project-recipes-app/src/Components/MainScreen/index.jsx\";\nimport React, { useContext, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { Redirect } from 'react-router';\nimport { fetchAllRecipes } from '../../API/apiMeals';\nimport { fetchAllCocktails } from '../../API/apiCocktails';\nimport RecipeContext from '../../Context/RecipeContext';\nimport CardFood from '../CardFood';\nimport CategoryList from '../CategoryList';\nimport './style.css';\n\nconst MainScreen = props => {\n  const {\n    page\n  } = props;\n  const {\n    dispatch\n  } = useContext(RecipeContext);\n  const {\n    state: {\n      mealsData,\n      cocktailsData,\n      search: {\n        searchingFilter,\n        searchType,\n        searchParam\n      }\n    }\n  } = useContext(RecipeContext);\n  const {\n    state: {\n      search: {\n        categoryFilterDrinks,\n        categoryFilterMeals\n      }\n    }\n  } = useContext(RecipeContext);\n  useEffect(() => {\n    fetchAllRecipes(searchParam, categoryFilterMeals, searchType).then(arrayLimit => dispatch({\n      type: 'SET_MEALS',\n      data: arrayLimit\n    }));\n    fetchAllCocktails(searchParam, categoryFilterDrinks, searchType).then(arrayLimit => dispatch({\n      type: 'SET_COCKTAILS',\n      data: arrayLimit\n    }));\n  }, [dispatch, categoryFilterDrinks, categoryFilterMeals, searchType, searchParam]);\n\n  const checkRedirect = (name, arr, id) => {\n    const ZERO = 0;\n\n    if (searchingFilter && arr.length === ZERO) {\n      // eslint-disable-next-line no-alert\n      alert('Sinto muito, não encontramos nenhuma receita para esses filtros.');\n    }\n\n    const unique = 1;\n\n    if (arr.length === unique && searchingFilter) {\n      return /*#__PURE__*/React.createElement(Redirect, {\n        to: `${name}/${arr[0][id]}`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 14\n        }\n      });\n    }\n  };\n\n  const mealsDoc = () => /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container-cards\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 5\n    }\n  }, mealsData.map(({\n    strMealThumb,\n    strMeal,\n    idMeal\n  }, index) => /*#__PURE__*/React.createElement(CardFood, {\n    idFood: idMeal,\n    page: page,\n    key: strMeal,\n    index: index,\n    foodName: strMeal,\n    thumb: strMealThumb,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }\n  })), checkRedirect('comidas', mealsData, 'idMeal'));\n\n  const cockTailsDoc = () => /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container-cards\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 5\n    }\n  }, cocktailsData.map(({\n    strDrinkThumb,\n    strDrink,\n    idDrink\n  }, index) => /*#__PURE__*/React.createElement(CardFood, {\n    idFood: idDrink,\n    page: page,\n    key: strDrink,\n    index: index,\n    foodName: strDrink,\n    thumb: strDrinkThumb,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }\n  })), checkRedirect('bebidas', cocktailsData, 'idDrink'));\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"main-screen-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(CategoryList, {\n    page: page,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }\n  }), page === 'comidas' ? mealsDoc() : cockTailsDoc());\n};\n\nexport default MainScreen;\nMainScreen.propTypes = {\n  page: PropTypes.string.isRequired\n};","map":{"version":3,"sources":["/home/lennon/Documentos/Programação/APP-RECEITAS/sd-07-project-recipes-app/src/Components/MainScreen/index.jsx"],"names":["React","useContext","useEffect","PropTypes","Redirect","fetchAllRecipes","fetchAllCocktails","RecipeContext","CardFood","CategoryList","MainScreen","props","page","dispatch","state","mealsData","cocktailsData","search","searchingFilter","searchType","searchParam","categoryFilterDrinks","categoryFilterMeals","then","arrayLimit","type","data","checkRedirect","name","arr","id","ZERO","length","alert","unique","mealsDoc","map","strMealThumb","strMeal","idMeal","index","cockTailsDoc","strDrinkThumb","strDrink","idDrink","propTypes","string","isRequired"],"mappings":"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","sourcesContent":["import React, { useContext, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { Redirect } from 'react-router';\nimport { fetchAllRecipes } from '../../API/apiMeals';\nimport { fetchAllCocktails } from '../../API/apiCocktails';\nimport RecipeContext from '../../Context/RecipeContext';\nimport CardFood from '../CardFood';\nimport CategoryList from '../CategoryList';\nimport './style.css';\n\nconst MainScreen = (props) => {\n  const { page } = props;\n  const { dispatch } = useContext(RecipeContext);\n  const {\n    state: {\n      mealsData,\n      cocktailsData,\n      search: { searchingFilter, searchType, searchParam },\n    },\n  } = useContext(RecipeContext);\n\n  const {\n    state: {\n      search: { categoryFilterDrinks, categoryFilterMeals },\n    },\n  } = useContext(RecipeContext);\n\n  useEffect(() => {\n    fetchAllRecipes(searchParam, categoryFilterMeals, searchType).then(\n      (arrayLimit) => dispatch({\n        type: 'SET_MEALS',\n        data: arrayLimit,\n      }),\n    );\n    fetchAllCocktails(searchParam, categoryFilterDrinks, searchType).then(\n      (arrayLimit) => dispatch({\n        type: 'SET_COCKTAILS',\n        data: arrayLimit,\n      }),\n    );\n  }, [\n    dispatch,\n    categoryFilterDrinks,\n    categoryFilterMeals,\n    searchType,\n    searchParam,\n  ]);\n\n  const checkRedirect = (name, arr, id) => {\n    const ZERO = 0;\n    if (searchingFilter && arr.length === ZERO) {\n      // eslint-disable-next-line no-alert\n      alert('Sinto muito, não encontramos nenhuma receita para esses filtros.');\n    }\n    const unique = 1;\n    if (arr.length === unique && searchingFilter) {\n      return <Redirect to={ `${name}/${arr[0][id]}` } />;\n    }\n  };\n\n  const mealsDoc = () => (\n    <div className=\"container-cards\">\n      {mealsData.map(({ strMealThumb, strMeal, idMeal }, index) => (\n        <CardFood\n          idFood={ idMeal }\n          page={ page }\n          key={ strMeal }\n          index={ index }\n          foodName={ strMeal }\n          thumb={ strMealThumb }\n        />\n      ))}\n      {checkRedirect('comidas', mealsData, 'idMeal')}\n    </div>\n  );\n\n  const cockTailsDoc = () => (\n    <div className=\"container-cards\">\n      {cocktailsData.map(({ strDrinkThumb, strDrink, idDrink }, index) => (\n        <CardFood\n          idFood={ idDrink }\n          page={ page }\n          key={ strDrink }\n          index={ index }\n          foodName={ strDrink }\n          thumb={ strDrinkThumb }\n        />\n      ))}\n      {checkRedirect('bebidas', cocktailsData, 'idDrink')}\n    </div>\n  );\n\n  return (\n    <div className=\"main-screen-container\">\n      <CategoryList page={ page } />\n      {page === 'comidas' ? mealsDoc() : cockTailsDoc()}\n    </div>\n  );\n};\n\nexport default MainScreen;\n\nMainScreen.propTypes = {\n  page: PropTypes.string.isRequired,\n};\n"]},"metadata":{},"sourceType":"module"}