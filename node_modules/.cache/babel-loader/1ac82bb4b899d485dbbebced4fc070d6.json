{"ast":null,"code":"var _jsxFileName = \"/home/lennon/Documentos/Programa\\xE7\\xE3o/APP-RECEITAS/sd-07-project-recipes-app/src/Components/Searcher/index.jsx\";\nimport React, { useContext, useState } from 'react';\nimport RecipeContext from '../../Context/RecipeContext';\nimport './style.css';\n\nconst Searcher = () => {\n  const {\n    dispatch\n  } = useContext(RecipeContext);\n  const [textFind, setTextFind] = useState('');\n  const [typeFind, setTypeFind] = useState('');\n\n  const setFilterParams = () => {\n    if (typeFind === 'f' && textFind.length > 1) {\n      // eslint-disable-next-line no-alert\n      alert('Sua busca deve conter somente 1 (um) caracter');\n    } else {\n      dispatch({\n        type: 'SEARCH_FILTER',\n        value: textFind,\n        typeSearch: typeFind\n      });\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"search-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    name: \"findText\",\n    value: textFind,\n    onChange: e => setTextFind(e.target.value),\n    \"data-testid\": \"search-input\",\n    className: \"input-search\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"s\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"radio\",\n    name: \"findBy\",\n    id: \"s\",\n    value: \"s\",\n    onClick: () => setTypeFind('s'),\n    \"data-testid\": \"name-search-radio\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }\n  }), \"Nome\"), /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"f\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"radio\",\n    name: \"findBy\",\n    id: \"f\",\n    value: \"f\",\n    onClick: () => setTypeFind('f'),\n    \"data-testid\": \"first-letter-search-radio\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }\n  }), \"Primeira Letra\"), /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"i\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"radio\",\n    name: \"findBy\",\n    id: \"i\",\n    value: \"i\",\n    onClick: () => setTypeFind('i'),\n    \"data-testid\": \"ingredient-search-radio\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }\n  }), \"Ingrediente\"), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    \"data-testid\": \"exec-search-btn\",\n    className: \"btn-search\",\n    onClick: setFilterParams,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }\n  }, \"Pesquisar\"));\n};\n\nexport default Searcher;","map":{"version":3,"sources":["/home/lennon/Documentos/Programação/APP-RECEITAS/sd-07-project-recipes-app/src/Components/Searcher/index.jsx"],"names":["React","useContext","useState","RecipeContext","Searcher","dispatch","textFind","setTextFind","typeFind","setTypeFind","setFilterParams","length","alert","type","value","typeSearch","e","target"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,QAA5B,QAA4C,OAA5C;AACA,OAAOC,aAAP,MAA0B,6BAA1B;AACA,OAAO,aAAP;;AAEA,MAAMC,QAAQ,GAAG,MAAM;AACrB,QAAM;AAAEC,IAAAA;AAAF,MAAeJ,UAAU,CAACE,aAAD,CAA/B;AACA,QAAM,CAACG,QAAD,EAAWC,WAAX,IAA0BL,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACM,QAAD,EAAWC,WAAX,IAA0BP,QAAQ,CAAC,EAAD,CAAxC;;AAEA,QAAMQ,eAAe,GAAG,MAAM;AAC5B,QAAIF,QAAQ,KAAK,GAAb,IAAoBF,QAAQ,CAACK,MAAT,GAAkB,CAA1C,EAA6C;AAC3C;AACAC,MAAAA,KAAK,CAAC,+CAAD,CAAL;AACD,KAHD,MAGO;AACLP,MAAAA,QAAQ,CAAC;AACPQ,QAAAA,IAAI,EAAE,eADC;AAEPC,QAAAA,KAAK,EAAER,QAFA;AAGPS,QAAAA,UAAU,EAAEP;AAHL,OAAD,CAAR;AAKD;AACF,GAXD;;AAaA,sBACE;AAAK,IAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AACE,IAAA,IAAI,EAAC,MADP;AAEE,IAAA,IAAI,EAAC,UAFP;AAGE,IAAA,KAAK,EAAGF,QAHV;AAIE,IAAA,QAAQ,EAAIU,CAAD,IAAOT,WAAW,CAACS,CAAC,CAACC,MAAF,CAASH,KAAV,CAJ/B;AAKE,mBAAY,cALd;AAME,IAAA,SAAS,EAAC,cANZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eASE;AAAO,IAAA,OAAO,EAAC,GAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AACE,IAAA,IAAI,EAAC,OADP;AAEE,IAAA,IAAI,EAAC,QAFP;AAGE,IAAA,EAAE,EAAC,GAHL;AAIE,IAAA,KAAK,EAAC,GAJR;AAKE,IAAA,OAAO,EAAG,MAAML,WAAW,CAAC,GAAD,CAL7B;AAME,mBAAY,mBANd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,SATF,eAoBE;AAAO,IAAA,OAAO,EAAC,GAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AACE,IAAA,IAAI,EAAC,OADP;AAEE,IAAA,IAAI,EAAC,QAFP;AAGE,IAAA,EAAE,EAAC,GAHL;AAIE,IAAA,KAAK,EAAC,GAJR;AAKE,IAAA,OAAO,EAAG,MAAMA,WAAW,CAAC,GAAD,CAL7B;AAME,mBAAY,2BANd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,mBApBF,eA+BE;AAAO,IAAA,OAAO,EAAC,GAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AACE,IAAA,IAAI,EAAC,OADP;AAEE,IAAA,IAAI,EAAC,QAFP;AAGE,IAAA,EAAE,EAAC,GAHL;AAIE,IAAA,KAAK,EAAC,GAJR;AAKE,IAAA,OAAO,EAAG,MAAMA,WAAW,CAAC,GAAD,CAL7B;AAME,mBAAY,yBANd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,gBA/BF,eA0CE;AACE,IAAA,IAAI,EAAC,QADP;AAEE,mBAAY,iBAFd;AAGE,IAAA,SAAS,EAAC,YAHZ;AAIE,IAAA,OAAO,EAAGC,eAJZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBA1CF,CADF;AAqDD,CAvED;;AAyEA,eAAeN,QAAf","sourcesContent":["import React, { useContext, useState } from 'react';\nimport RecipeContext from '../../Context/RecipeContext';\nimport './style.css';\n\nconst Searcher = () => {\n  const { dispatch } = useContext(RecipeContext);\n  const [textFind, setTextFind] = useState('');\n  const [typeFind, setTypeFind] = useState('');\n\n  const setFilterParams = () => {\n    if (typeFind === 'f' && textFind.length > 1) {\n      // eslint-disable-next-line no-alert\n      alert('Sua busca deve conter somente 1 (um) caracter');\n    } else {\n      dispatch({\n        type: 'SEARCH_FILTER',\n        value: textFind,\n        typeSearch: typeFind,\n      });\n    }\n  };\n\n  return (\n    <div className=\"search-container\">\n      <input\n        type=\"text\"\n        name=\"findText\"\n        value={ textFind }\n        onChange={ (e) => setTextFind(e.target.value) }\n        data-testid=\"search-input\"\n        className=\"input-search\"\n      />\n      <label htmlFor=\"s\">\n        <input\n          type=\"radio\"\n          name=\"findBy\"\n          id=\"s\"\n          value=\"s\"\n          onClick={ () => setTypeFind('s') }\n          data-testid=\"name-search-radio\"\n        />\n        Nome\n      </label>\n      <label htmlFor=\"f\">\n        <input\n          type=\"radio\"\n          name=\"findBy\"\n          id=\"f\"\n          value=\"f\"\n          onClick={ () => setTypeFind('f') }\n          data-testid=\"first-letter-search-radio\"\n        />\n        Primeira Letra\n      </label>\n      <label htmlFor=\"i\">\n        <input\n          type=\"radio\"\n          name=\"findBy\"\n          id=\"i\"\n          value=\"i\"\n          onClick={ () => setTypeFind('i') }\n          data-testid=\"ingredient-search-radio\"\n        />\n        Ingrediente\n      </label>\n      <button\n        type=\"button\"\n        data-testid=\"exec-search-btn\"\n        className=\"btn-search\"\n        onClick={ setFilterParams }\n      >\n        Pesquisar\n      </button>\n    </div>\n  );\n};\n\nexport default Searcher;\n"]},"metadata":{},"sourceType":"module"}