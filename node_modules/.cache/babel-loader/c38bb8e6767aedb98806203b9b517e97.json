{"ast":null,"code":"const start = 0;\nconst end = 12;\nexport const fetchAllCocktails = async (searcher = '', category = '', type) => {\n  const URL_BASE = type === 'i' ? 'https://www.thecocktaildb.com/api/json/v1/1/filter.php?' : 'https://www.thecocktaildb.com/api/json/v1/1/search.php?';\n  const URL_ALL = `${URL_BASE}${type}=${searcher}`;\n  const URL_CATEGORY = `https://www.thecocktaildb.com/api/json/v1/1/filter.php?c=${category}`;\n  const URL = category === '' ? URL_ALL : URL_CATEGORY;\n  const resolve = await fetch(URL);\n  const resolveJson = await resolve.json();\n\n  if (!resolveJson.drinks) {\n    return [];\n  }\n\n  const limitArray = resolveJson.drinks.slice(start, end);\n  return limitArray;\n};\nexport const fetchCategoriesCocktails = async () => {\n  const sizeInit = 0;\n  const sizeEnd = 5;\n  const URL = 'https://www.thecocktaildb.com/api/json/v1/1/list.php?c=list';\n  const resolve = await fetch(URL);\n  const resolveJson = await resolve.json();\n  const limitArray = resolveJson.drinks.slice(sizeInit, sizeEnd);\n  return limitArray;\n};\nexport const singleCocktail = async idCocktail => {\n  const URL = `https://www.thecocktaildb.com/api/json/v1/1/lookup.php?i=${idCocktail}`;\n  const resolve = await fetch(URL);\n  const resolveJson = await resolve.json();\n  const tags = resolveJson.drinks[0].strTags === null ? [] : resolveJson.drinks[0].strTags.split(',');\n  const objectModel = {\n    idRecipe: resolveJson.drinks[0].idDrink,\n    nameRecipe: resolveJson.drinks[0].strDrink,\n    imgRecipe: resolveJson.drinks[0].strDrinkThumb,\n    instructionRecipe: resolveJson.drinks[0].strInstructions,\n    categoryRecipe: resolveJson.drinks[0].strCategory,\n    ingredients: [],\n    measurements: [],\n    quantityIngredients: 0,\n    areaRecipe: '',\n    typeRecipe: 'bebida',\n    alcoholic: resolveJson.drinks[0].strAlcoholic,\n    tagRecipe: tags\n  };\n  const arrayObject = Object.entries(resolveJson.drinks[0]);\n  const arrayIngredients = arrayObject.filter(elem => elem[0].includes('strIngredient') && elem[1] !== '' && elem[1] !== ' ' && elem[1] !== null);\n  const arrayMeasurements = arrayObject.filter(elem => elem[0].includes('strMeasure'));\n  const SIZE = arrayIngredients.length;\n  objectModel.ingredients = arrayIngredients.slice(start, SIZE).map(elem => [elem[1], false]);\n  objectModel.measurements = arrayMeasurements.slice(start, SIZE).map(elem => elem[1]);\n  objectModel.quantityIngredients = SIZE;\n  return objectModel;\n};","map":{"version":3,"sources":["/home/lennon/Documentos/Programação/APP-RECEITAS/sd-07-project-recipes-app/src/API/apiCocktails.js"],"names":["start","end","fetchAllCocktails","searcher","category","type","URL_BASE","URL_ALL","URL_CATEGORY","URL","resolve","fetch","resolveJson","json","drinks","limitArray","slice","fetchCategoriesCocktails","sizeInit","sizeEnd","singleCocktail","idCocktail","tags","strTags","split","objectModel","idRecipe","idDrink","nameRecipe","strDrink","imgRecipe","strDrinkThumb","instructionRecipe","strInstructions","categoryRecipe","strCategory","ingredients","measurements","quantityIngredients","areaRecipe","typeRecipe","alcoholic","strAlcoholic","tagRecipe","arrayObject","Object","entries","arrayIngredients","filter","elem","includes","arrayMeasurements","SIZE","length","map"],"mappings":"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","sourcesContent":["const start = 0;\nconst end = 12;\n\nexport const fetchAllCocktails = async (\n  searcher = '',\n  category = '',\n  type,\n) => {\n  const URL_BASE = type === 'i'\n    ? 'https://www.thecocktaildb.com/api/json/v1/1/filter.php?'\n    : 'https://www.thecocktaildb.com/api/json/v1/1/search.php?';\n  const URL_ALL = `${URL_BASE}${type}=${searcher}`;\n  const URL_CATEGORY = `https://www.thecocktaildb.com/api/json/v1/1/filter.php?c=${category}`;\n\n  const URL = category === '' ? URL_ALL : URL_CATEGORY;\n  const resolve = await fetch(URL);\n\n  const resolveJson = await resolve.json();\n\n  if (!resolveJson.drinks) {\n    return [];\n  }\n\n  const limitArray = resolveJson.drinks.slice(start, end);\n\n  return limitArray;\n};\n\nexport const fetchCategoriesCocktails = async () => {\n  const sizeInit = 0;\n  const sizeEnd = 5;\n\n  const URL = 'https://www.thecocktaildb.com/api/json/v1/1/list.php?c=list';\n  const resolve = await fetch(URL);\n\n  const resolveJson = await resolve.json();\n\n  const limitArray = resolveJson.drinks.slice(sizeInit, sizeEnd);\n\n  return limitArray;\n};\n\nexport const singleCocktail = async (idCocktail) => {\n  const URL = `https://www.thecocktaildb.com/api/json/v1/1/lookup.php?i=${idCocktail}`;\n  const resolve = await fetch(URL);\n\n  const resolveJson = await resolve.json();\n  const tags = resolveJson.drinks[0].strTags === null\n    ? []\n    : resolveJson.drinks[0].strTags.split(',');\n  const objectModel = {\n    idRecipe: resolveJson.drinks[0].idDrink,\n    nameRecipe: resolveJson.drinks[0].strDrink,\n    imgRecipe: resolveJson.drinks[0].strDrinkThumb,\n    instructionRecipe: resolveJson.drinks[0].strInstructions,\n    categoryRecipe: resolveJson.drinks[0].strCategory,\n    ingredients: [],\n    measurements: [],\n    quantityIngredients: 0,\n    areaRecipe: '',\n    typeRecipe: 'bebida',\n    alcoholic: resolveJson.drinks[0].strAlcoholic,\n    tagRecipe: tags,\n  };\n\n  const arrayObject = Object.entries(resolveJson.drinks[0]);\n  const arrayIngredients = arrayObject.filter(\n    (elem) => elem[0].includes('strIngredient')\n      && elem[1] !== ''\n      && elem[1] !== ' '\n      && elem[1] !== null,\n  );\n\n  const arrayMeasurements = arrayObject.filter((elem) => elem[0].includes('strMeasure'));\n\n  const SIZE = arrayIngredients.length;\n\n  objectModel.ingredients = arrayIngredients\n    .slice(start, SIZE)\n    .map((elem) => [elem[1], false]);\n  objectModel.measurements = arrayMeasurements.slice(start, SIZE).map((elem) => elem[1]);\n  objectModel.quantityIngredients = SIZE;\n\n  return objectModel;\n};\n"]},"metadata":{},"sourceType":"module"}